name: 'Deploy AWS Terraform'

on:
  issue_comment:
    types: [created]
  
permissions:
  contents: write
  pull-requests: write
  id-token: write
  deployments: write
  checks: read
  actions: write

env:
    TF_VAR_CF_OIDC_CLIENT_SECRET: ${{ secrets.CF_OIDC_CLIENT_SECRET }}
    AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE_TO_ASSUME }}

jobs:
    terraform:
        name: 'Terraform'
        runs-on: ubuntu-latest

        defaults:
            run:
                shell: bash

        steps:
            - uses: github/branch-deploy@v9
              id: branch-deploy
              with:
                trigger: ".deploy"
                noop_trigger: ".noop"
                environment_targets: "application,infrastructure"
                disable_naked_commands: "true"
            
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  ref: ${{ steps.branch-deploy.outputs.ref }}
            
            - name: Setup Terraform
              uses: hashicorp/setup-terraform@v3
            
            - name: Configure AWS Credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
                aws-region: us-west-2
                role-session-name: "terraform-via-GHA"
            
            - name: Terraform Init
              id: init
              working-directory: ${{steps.branch-deploy.outputs.environment}}
              run: terraform init -upgrade
              
            # Continues on error so that the plan step still runs.
            # TODO: commit any reformatted files automatically.
            - name: Terraform Format
              id: fmt
              working-directory: ${{steps.branch-deploy.outputs.environment}}
              run: terraform fmt -check
              continue-on-error: true 
            
            - name: Terraform Validate
              id: validate
              working-directory: ${{steps.branch-deploy.outputs.environment}}
              run: terraform validate -no-color
      
            # Plans can be too large for a comment, so write to a file and truncate if necessary
            - name: Terraform Plan
              id: plan
              working-directory: ${{steps.branch-deploy.outputs.environment}}
              run: | 
                terraform plan -out=plan.tmp
                terraform show -no-color plan.tmp > plan.out
              # Continue on error to emit errors in the plan as warnings in the pull request comment
              continue-on-error: true

            # Make the comment
            - name: Terraform Show Plan
              uses: actions/github-script@v7
              env:
                PLAN_FILE_PATH: '${{steps.branch-deploy.outputs.environment}}/plan.out'
              with:
                github-token: ${{ secrets.GITHUB_TOKEN }}
                script: |
                  const run_url = process.env.GITHUB_SERVER_URL + '/' + process.env.GITHUB_REPOSITORY + '/actions/runs/' + process.env.GITHUB_RUN_ID
                  const run_link = '<a href="' + run_url + '">Actions</a>.'
                  const fs = require('fs')
                  const plan_file = fs.readFileSync(process.env.PLAN_FILE_PATH, 'utf8')
                  const plan = plan_file.length > 65000 ? plan_file.toString().substring(0, 65000) + " ..." : plan_file
                  const truncated_message = plan_file.length > 65000 ? "Output is too long and was truncated. You can read full Plan in " + run_link + "<br /><br />" : ""
                  const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
                  #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
                  #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
                  <details><summary>Validation Output</summary>

                  \`\`\`\n
                  ${{ steps.validate.outputs.stdout }}
                  \`\`\`

                  </details>

                  #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

                  <details><summary>Show Plan</summary>

                  \`\`\`\n
                  ${plan}
                  \`\`\`

                  </details>
                  ${truncated_message}

                  *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;

                  github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: output
                  })

            - name: Terraform Apply
              id: apply
              if: ${{ steps.branch-deploy.outputs.continue == 'true' && steps.branch-deploy.outputs.noop != 'true' }}
              working-directory: ${{steps.branch-deploy.outputs.environment}}
              run: terraform apply -auto-approve -no-color plan.tmp

            - name: Post Apply Failure
              if: ${{steps.apply.outcome == 'failure' }}
              uses: peter-evans/create-or-update-comment@v2.1.0
              with:
                issue-number: ${{ github.event.pull_request.number }}
                body: |
                  ## ‚ö†Ô∏è Terraform apply failed for `${{ github.sha }}` ‚ö†Ô∏è
        
                  ```
                  ${{ steps.apply.outputs.stderr }}
                  ```
